// Functions: All of Neo CSS's API functions.

@use "../variables/" as *;
@use "sass:color" as COLOR;
@use "sass:list" as LIST;
@use "sass:map" as MAP;
@use "sass:math" as MATH;
@use "sass:meta" as META;

// ===============
// COLOR FETCHING:
// ===============

// Fetches out of $palette without alteration.
@function color($color) {
    @while META.type-of($color) != color {
        @if MAP.has-key($palette, $color) {
            $color: MAP.get($palette, $color);
        }
        @else {
            @error "#{$color} does not exist in $palette.";
        }
    }
    @return $color;
}

// Fetches $color and adjusts alpha channel.
@function alpha($color, $alpha) {
    @return rgba(color($color), $alpha);
}

// ===================
// COLOR MANIPULATION:
// ===================

// Tints (lightens) $color by $perc.
@function tint($color, $perc) {
    $color: color($color);
    @return COLOR.adjust($color, $lightness: +$perc);
}

// Shades (darkens) $color by $perc.
@function shade($color, $perc) {
    $color: color($color);
    @return COLOR.adjust($color, $lightness: -$perc);
}

// Shifts (lightens/darkens) $color by $perc based on lightness.
@function color-shift($color, $perc) {
    $color: color($color);
    @if COLOR.lightness($color) > 50% {
        @return shade($color, $perc);
    }
    @return tint($color, $perc);
}

// Tones (grays) $color by $perc.
@function tone($color, $perc) {
    $color: color($color);
    @return COLOR.mix(#808080, $color, $weight: $perc);
}

// ====================
// COLOR ACCESSIBILITY:
// ====================

// Adjusts $color1 contrast to be legible on $color2.
@function text-color($color1, $color2, $ratio: $contrast-text-ratio) {
    @return accessible($color1, $color2, $ratio);
}

// Steps $color contrast by $ratio, $step number of times.
@function step-color($color, $step, $ratio: $contrast-step-ratio) {
    @return accessible($color, $color, MATH.pow($ratio, $step));
}

// Adjusts constrast of $color1 to be contrast $ratio on $color2.
@function accessible($color1, $color2, $ratio)
{
    // Get $color1 and $color2:
    $color1: color($color1);
    $color2: color($color2);

    // Get maximum ratio value:
    $ratio-max: MATH.max(contrast(#FFF, $color2), contrast(#000, $color2));

    // Max ratio at maximum possible value:
    $ratio: MATH.min($ratio, $ratio-max);

    // If lighter color on background meets requirements easier:
    $lighten: contrast(#FFF, $color2) > contrast(#000, $color2);

    // While ratio is too low; lighten or darken color:
    @while contrast($color1, $color2) < $ratio {
        @if $lighten {
            $color1: COLOR.adjust($color1, $lightness: +2%);
        }
        @else {
            $color1: COLOR.adjust($color1, $lightness: -2%);
        }
    }

    // Return color:
    @return $color1;
}

// Gets the relative luminance of $color.
// Based on https://www.w3.org/TR/WCAG20/#relativeluminancedef
@function luminance($color)
{
    // Get color from $palette:
    $color: color($color);

    // Break down color into rgb channels:
    $rgb: COLOR.red($color), COLOR.green($color), COLOR.blue($color);

    // Loop through each color:
    @for $i from 1 through 3
    {
        // Get and divide channel by 255:
        $channel: MATH.div(LIST.nth($rgb, $i), 255);

        // Perform calculations on channel:
        $channel: if($channel < 0.03928, MATH.div($channel, 12.92), MATH.pow(MATH.div($channel + 0.055, 1.055), 2.4));

        // Replace channel in list:
        $rgb: LIST.set-nth($rgb, $i, $channel);
    }

    // Calculate and return color luminance:
    @return (0.2126 * LIST.nth($rgb, 1) + 0.7152 * LIST.nth($rgb, 2) + 0.0722 * LIST.nth($rgb, 3));
}

// Gets the contrast ratio between $color1 and $color2.
// Based on https://www.w3.org/TR/WCAG20/#contrast-ratiodef
@function contrast($color1, $color2)
{
    // Get luminance of each color:
    $color1: luminance($color1);
    $color2: luminance($color2);

    // Calculate initial color ratio:
    $ratio: MATH.div(($color1 + 0.05), ($color2 + 0.05));

    // Return correct ratio based on both color's luminance:
    @return if($color1 < $color2, MATH.div(1, $ratio), $ratio);
}

// ==================
// MATH CALCULATIONS:
// ==================

// Steps $value up/down based on $ratio.
@function step($value, $ratio, $step) {
    @return $value * MATH.pow($ratio, $step);
}

// =================
// SIZING FUNCTIONS:
// =================

// Converts "px" units into "rem" units.
@function px($value) {
    @return MATH.div($value, 16) * 1rem;
}

// Scales value based on $scale-baseline and $scale-ratio.
@function scale($step) {
    @return step($scale-baseline, $scale-ratio, $step);
}

// Scales text based on $font-size and $font-size-ratio.
@function text-size($step) {
    @return step($font-size, $font-size-ratio, $step);
}